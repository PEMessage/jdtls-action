name: Build and Release eclipse.jdt.ls

on:
  workflow_dispatch:
    inputs:
      release-tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release-notes:
        description: 'Release notes'
        required: false
        default: 'Automated build of eclipse.jdt.ls'

env:
  BUILD_DIR: eclipse.jdt.ls

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch all history and tags

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build eclipse.jdt.ls
      run: |
        # Navigate to the submodule directory
        cd $BUILD_DIR
        
        # Make mvnw executable
        chmod +x ./mvnw
        
        # Build with Java 21, skip tests, and update snapshots
        JAVA_HOME=$JAVA_HOME ./mvnw clean verify -U -DskipTests=true

    - name: Create build artifacts archive
      run: |
        cd $BUILD_DIR/org.eclipse.jdt.ls.product/target/repository/
        cd ..
        mv repository eclipse-jdt-ls
        tar -czf eclipse-jdt-ls-build.tar.gz eclipse-jdt-ls
        zip -r eclipse-jdt-ls-build.zip eclipse-jdt-ls

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: eclipse-jdt-ls-build
        path: |
          ${{ env.BUILD_DIR }}/org.eclipse.jdt.ls.product/target/eclipse-jdt-ls-build.tar.gz
          ${{ env.BUILD_DIR }}/org.eclipse.jdt.ls.product/target/eclipse-jdt-ls-build.zip
        retention-days: 7

  check-tag:
    runs-on: ubuntu-latest
    outputs:
      tag-exists: ${{ steps.check-tag.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag exists
        id: check-tag
        run: |
          TAG="${{ github.event.inputs.release-tag }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG does not exist"
          fi

  create-tag:
    needs: [build, check-tag]
    runs-on: ubuntu-latest
    if: needs.check-tag.outputs.tag-exists == 'false'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          TAG="${{ github.event.inputs.release-tag }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

  release:
    needs: [build, check-tag, create-tag]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: eclipse-jdt-ls-build
        path: ./artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.release-tag }}
        name: ${{ github.event.inputs.release-tag }}
        body: ${{ github.event.inputs.release-notes }}
        files: |
          ./artifacts/eclipse-jdt-ls-build.tar.gz
          ./artifacts/eclipse-jdt-ls-build.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release artifacts to GitHub
      run: |
        echo "Release created successfully with artifacts:"
        ls -la ./artifacts/
